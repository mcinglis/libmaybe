
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libmaybe.
//
// Libmaybe is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libmaybe is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libmaybe. If not, see <https://gnu.org/licenses/>.


// This file is the result of rendering:
//
//     {{template_path}}
//
// You should make changes to this file by tuning the build process, or (at a
// stretch) modifying the generation script or template file; not by editing
// this file as-is.


#ifndef LIBMAYBE_MAYBE_{{macroname}}_H
#define LIBMAYBE_MAYBE_{{macroname}}_H


#include <libtypes/types.h>
{% for p in sys_headers %}
#include <{{p}}>
{% endfor %}

#include "def/maybe_{{filename}}.h"
{% for path in rel_headers %}
#include "{{p}}"
{% endfor %}


Maybe_{{typename}}
maybe_{{funcname}}__id(
        Maybe_{{typename}} );


Maybe_{{typename}}
maybe_{{funcname}}__nothing(
        void );


Maybe_{{typename}}
maybe_{{funcname}}__nothingv(
        {{type}} );


Maybe_{{typename}}
maybe_{{funcname}}__value(
        {{type}} );


Maybe_{{typename}}
maybe_{{funcname}}__from_ptr(
        {{type}} const * );


{{type}} const *
maybe_{{funcname}}__to_ptr(
        Maybe_{{typename}} const * );


{{type}} *
maybe_{{funcname}}__to_ptrm(
        Maybe_{{typename}} * );


bool
maybe_{{funcname}}__is_nothing(
        Maybe_{{typename}} );


bool
maybe_{{funcname}}__is_value(
        Maybe_{{typename}} );


{{type}}
maybe_{{funcname}}__unwrap(
        Maybe_{{typename}} );


{{type}}
maybe_{{funcname}}__unwrap_or(
        Maybe_{{typename}},
        {{type}} or );


Maybe_{{typename}}
maybe_{{funcname}}__applied(
        Maybe_{{typename}},
        {{type}} ( * f )( {{type}} ) );


void
maybe_{{funcname}}__apply(
        Maybe_{{typename}} *,
        {{type}} ( * f )( {{type}} ) );


Maybe_{{typename}}
maybe_{{funcname}}__applied2(
        Maybe_{{typename}},
        Maybe_{{typename}},
        {{type}} ( * f )( {{type}}, {{type}} ) );


void
maybe_{{funcname}}__apply2(
        Maybe_{{typename}} *,
        Maybe_{{typename}},
        {{type}} ( * f )( {{type}}, {{type}} ) );


Maybe_{{typename}}
maybe_{{funcname}}__and(
        Maybe_{{typename}},
        Maybe_{{typename}} );


Maybe_{{typename}}
maybe_{{funcname}}__or(
        Maybe_{{typename}},
        Maybe_{{typename}} );


bool
maybe_{{funcname}}__equal_by(
        Maybe_{{typename}} x,
        Maybe_{{typename}} y,
        bool ( * eq )( {{type}} xv, {{type}} yv ) );


ord
maybe_{{funcname}}__compare_by(
        Maybe_{{typename}} x,
        Maybe_{{typename}} y,
        ord ( * cmp )( {{type}} xv, {{type}} yv ) );




{% if 'EQ' in typeclasses %}


bool
maybe_{{funcname}}__equal(
        Maybe_{{typename}},
        Maybe_{{typename}} );


bool
maybe_{{funcname}}__not_equal(
        Maybe_{{typename}},
        Maybe_{{typename}} );


{% endif %} {# 'EQ' in typeclasses #}




{% if 'ORD' in typeclasses%}


ord
maybe_{{funcname}}__compare(
        Maybe_{{typename}},
        Maybe_{{typename}} );


bool
maybe_{{funcname}}__less_than(
        Maybe_{{typename}},
        Maybe_{{typename}} );


bool
maybe_{{funcname}}__less_than_or_eq(
        Maybe_{{typename}},
        Maybe_{{typename}} );


bool
maybe_{{funcname}}__greater_than_or_eq(
        Maybe_{{typename}},
        Maybe_{{typename}} );


bool
maybe_{{funcname}}__greater_than(
        Maybe_{{typename}},
        Maybe_{{typename}} );


Maybe_{{typename}}
maybe_{{funcname}}__min2(
        Maybe_{{typename}},
        Maybe_{{typename}} );


Maybe_{{typename}}
maybe_{{funcname}}__max2(
        Maybe_{{typename}},
        Maybe_{{typename}} );


Maybe_{{typename}}
maybe_{{funcname}}__min_n(
        Maybe_{{typename}} const * ms,
        size_t n );


Maybe_{{typename}}
maybe_{{funcname}}__max_n(
        Maybe_{{typename}} const * ms,
        size_t n );


// @public
#define maybe_{{funcname}}__min( ... ) \
    maybe_{{funcname}}__min_n( \
        ( Maybe_{{typename}}[] ){ __VA_ARGS__ }, \
        NELEM( ( Maybe_{{typename}}[] ){ __VA_ARGS__ } ) )


// @public
#define maybe_{{funcname}}__max( ... ) \
    maybe_{{funcname}}__max_n( \
        ( Maybe_{{typename}}[] ){ __VA_ARGS__ }, \
        NELEM( ( Maybe_{{typename}}[] ){ __VA_ARGS__ } ) )


Maybe_{{typename}}
maybe_{{funcname}}__clamp(
        Maybe_{{typename}} x,
        Maybe_{{typename}} lower,
        Maybe_{{typename}} upper );


bool
maybe_{{funcname}}__in_range(
        Maybe_{{typename}} lower,
        Maybe_{{typename}} upper,
        Maybe_{{typename}} x );


bool
maybe_{{funcname}}__in_xrange(
        Maybe_{{typename}} lower,
        Maybe_{{typename}} upper,
        Maybe_{{typename}} x );


{% endif %} {# 'ORD' in typeclasses #}


{% if 'FLOAT' in typeclasses %}


#include <libmacro/nelem.h>


bool
maybe_{{funcname}}__equal_e(
        Maybe_{{type}} x,
        Maybe_{{type}} y,
        {{type}} epsilon );


Maybe_{{type}}
maybe_{{funcname}}__update_average(
        Maybe_{{type}} average,
        size_t num_samples,
        Maybe_{{type}} addition );


{% endif %}


{% if 'FROM_STR' in typeclasses %}


Maybe_{{typename}}
maybe_{{funcname}}__from_str(
        char const * str );


void
maybe_{{funcname}}__argparse(
        char const * name,
        char const * value,
        void * vmaybe );


{% endif %} {# 'FROM_STR' in typeclasses #}




#endif // ifndef LIBMAYBE_MAYBE_{{macroname}}_H

